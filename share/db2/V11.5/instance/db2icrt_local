#!/bin/sh
#############################################################################
#
# Licensed Materials - Property of IBM
#
# "Restricted Materials of IBM" 
#
# (C) COPYRIGHT IBM Corp. 1993, 2019 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#############################################################################

#
# NAME: db2icrt
#
# FUNCTION: db2icrt - creates a DB2 instance.
#
# USAGE: db2icrt [-h|-?] [-d] [-a AuthType] [-p PortName]
#                [-s InstType] [-u FencedID] InstName
#          -h|-?       display the usage information.
#          -d          turn debug mode on.
#          AuthType    is the authentication type (SERVER, CLIENT or DCS)
#                      for the instance. The default is SERVER.
#          PortName    is the port name or number used by the instance.
#          InstType    is the type of instance to create (mpp, sp, client).
#          FencedID    is the name of user ID under which fenced User
#                      Defined Functions and fenced Stored Procedures will run.
#          InstName    is the name of the instance.
#
# NOTE: For security reasons, it is recommended that you do not use
#       the instance name as the FencedID. However, if you are not
#       planning to use fenced User Defined Functions (UDFs) or fenced
#       Stored Procedures then setting the FencedID same as InstName may
#       save you the step of having to create another user for the FencedID.
#
########################################################################

# Options for "set" command
setopts="${setopts:-+x}"
set ${setopts?}

# Current DB2 installation directory

DB2LOCAL=`echo $DB2LOCAL`

if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/.mount ]; then
   DB2DIR=${DB2LOCAL?}/instance
   curdir=`/bin/pwd`
else
   curdir=`/bin/pwd`
   DB2DIR=`dirname $0`
   cd ${DB2DIR?}
   DB2DIR=`/bin/pwd`
fi

cd ${DB2DIR?}
DB2DIR=`dirname ${DB2DIR?}`
if [ ! -d ${DB2DIR?}/instance ]
then
    DB2DIR=`dirname ${DB2DIR?}`
fi
cfg_tmp="${DB2DIR?}/cfg/installcopy.cfg"
cmd_db2fupdt_tmp="${DB2DIR?}/bin/db2fupdt"
DB2_KEEP_IN_ORIGINAL_DB2DIR="${DB2_KEEP_IN_ORIGINAL_DB2DIR:-FALSE}"

if [ -f "${cfg_tmp?}" -a -f "${cmd_db2fupdt_tmp?}"  -a "X${DB2_KEEP_IN_ORIGINAL_DB2DIR?}" != "XTRUE" ]; then
   db2dir_tmp=`${cmd_db2fupdt_tmp?} -f ${cfg_tmp?} -p DB2DIR`
   if [ $? -eq 0 ]; then
      if [ -d ${db2dir_tmp?} ]; then
         cd ${db2dir_tmp?} 2>/dev/null 1>/dev/null
         if [ $? -eq 0 ]; then
            DB2DIR=`echo ${db2dir_tmp?} | sed 's/\/$//'`
         fi
     fi
   fi
fi 
cd ${curdir?}
unset curdir cfg_tmp cmd_db2fupdt_tmp db2dir_tmp DB2_KEEP_IN_ORIGINAL_DB2DIR

# Set the directory name where this file is located.
curdir=`/bin/pwd`
PROGDIR=`dirname $0`
cd ${PROGDIR?}
PROGDIR=`/bin/pwd`
cd ${curdir?}

PROGNAME=`basename $0`       # Program name
PROGARGS="$*"

# Include common definition file
if [ -f ${PROGDIR?}/db2iutil ]; then
    . ${PROGDIR?}/db2iutil
else
    echo "File ${PROGDIR?}/db2iutil not found."
    echo "Exiting..."
    exit 1
fi

get_locale         # Get the locale name of set message catalog path
chk_root           # Check that only root is running this program
add_servicerec ${PROGNAME?} 0
if [ $? -ne 0 ]; then
   exit 67
fi

# Special variables needed for instance creation
chk_spacereq       #  Disk space (in KB) required to create an instance
dmsg "Space required = ${SPACEREQ?}"

#-----------------------------------------------------------------------#
#               Start of function definitions
#-----------------------------------------------------------------------#

DB2DLNK=${FALSE?}

# To display the command syntax
syntax ()
{
    display_msg ${DB2CAT?} 1 \
        'DBI1001I Usage: %s [-h|-?] [-d] [-p PortName] [-s InstType] [-u FencedID] [-a AuthType]  InstName' \
        ${PROGNAME?}
    cleanup yes 
    exit 1
}

# Set the dbm cfg file to be used during instance creation
set_cfgfile()
{
    trac set_cfgfile $@
    set ${setopts?}

    # EEE and EE are deprecated starting in v8.  They are maintained for
    # those who have scripted calls to db2icrt.  They will be removed
    # eventually.
    if   [ ${CFGFILETYPE?} = "EEE"    -o ${CFGFILETYPE?} = "eee"    ]; then
        CFGFILE="db2sysmp"
    elif [ ${CFGFILETYPE?} = "EE"     -o ${CFGFILETYPE?} = "ee"     ]; then
        CFGFILE="db2syssv"
    elif [ ${CFGFILETYPE?} = "ESE"    -o ${CFGFILETYPE?} = "ese"    ]; then
        CFGFILE="db2sysmp"
    elif [ ${CFGFILETYPE?} = "WSE"    -o ${CFGFILETYPE?} = "wse"    ]; then
        CFGFILE="db2syssv"
    elif [ ${CFGFILETYPE?} = "CLIENT" -o ${CFGFILETYPE?} = "client" ]; then
        CFGFILE="db2sysrq"
    elif [ ${CFGFILETYPE?} = "STANDALONE" -o ${CFGFILETYPE?} = "standalone" ]; then
        CFGFILE="db2syssr"
    elif [ ${CFGFILETYPE?} = "DSF" -o ${CFGFILETYPE?} = "dsf" ]; then
    	CFGFILE="db2sysmp"
      INSTTYPE=${ITYPE_SD?}
    else
        display_msg ${DB2CAT?} 1 \
            'DBI1001E Usage: %s [-h|-?] [-d] [-p] [-s InstType] [-u FencedID] [-a AuthType] InstName' \
            ${PROGNAME?}
        stop_prog 1
    fi

    if [ ! -f ${DB2DIR?}/cfg/${CFGFILE?} ]; then
        display_msg ${DB2CAT?} 255 \
            'DBI1255E The configuration file %s needed to create the specified instance type cannot be found' \
            ${DB2DIR?}/cfg/${CFGFILE?}
        stop_prog 1
    fi

    trax set_cfgfile
}

# Default values for command line options
defaultopts()
{
    # trac defaultopts $@

    DEBUG=1               # Debug mode is FALSE

    AUTHTYPE="SERVER"     # Default authentication type
    INSTNAME=""           # Initialize variable for instance name
    FENCEDID=""           # Initialize variable for FencedID userid
    CFGFILE=""            # Initialize variable for default DBM cfg file
    CFGFILETYPE=""        # Initialize variable for the DBM cfg file type
    PORTNUM=""            # Intialize variable for setting the port number to false  
    SETCFGFILE="${FALSE?}" # Intialize variable for setting the DBM cfg to false  
    INSTTYPE=${ITYPE_UNK?} # Initialize variable for instance type as UNKNOWN
    UPDATE_SVCENAME=${TRUE?} # Update dbm cfg file for service name
#    BITWIDTH=32
    FORCEICRT=1

    # This variable is used for Service only....
    # If KEEPSQLLIB set to "0" (TRUE), sqllib directory will not
    # be deleted if an error occurs during instance creation.
    KEEPSQLLIB=1          # Set to FALSE by default

    ISDB2SSHID="${FALSE?}"
    SKIP_UPDT_DBM="${FALSE?}"
    DB2SSHUSERNAME=""
    DB2SSHGROUP=""
    ONLINE_PREPARE_SQLLIB_VER=${FALSE?}
    # trax defaultopts
}

#-----------------------------------------------------------------------#
#                End of function definitions
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
#                             Main program
#-----------------------------------------------------------------------#

defaultopts        # Define default values for command-line options
checkRPATH

# Process command-line options
case $# in
    0)
        syntax ;;
    *)
        while getopts :a:c:p:s:u:i:g:hdkFNo optchar; do
            case ${optchar?} in
                a)  # Authentication type
                    AUTHTYPE="${OPTARG?}" ;;
                c)  # Config file, unsupported
                    CFGFILE="${OPTARG?}" ;;
                p)  # Port number or name for the instance
                    PORTNUM="${OPTARG?}" ;;
                s)  # Specify the instance config file
                    CFGFILETYPE="${OPTARG?}"
                    SETCFGFILE="${TRUE?}" ;;
                u)  # FencedID user name
                    FENCEDID="${OPTARG?}" ;;
                d)  # Turn debug mode on
                    DEBUG=0
                    setopts="-x" ;;
                k)  # Do not delete sqllib dir
                    KEEPSQLLIB=0 ;;
                F)  # Force instance creation even if prereq. filesets not present
                    FORCEICRT=0 ;;
                i)  # db2sshid user. To setup passwordless SSH for this user too
		    ISDB2SSHID="${TRUE?}"
		    DB2SSHUSERNAME="${OPTARG?}" ;;
                g)  # db2sshid user group name
                    DB2SSHGROUP="${OPTARG?}" ;;
                N)  # Passed by db2iupgrade whn updt_dbm need not be run as part of db2icrt
                    SKIP_UPDT_DBM="${TRUE?}" ;;
                o)  # Passed by db2iupgrade when online uprade is invoked to prepare the sqllib_version 
                    ONLINE_PREPARE_SQLLIB_VER="${TRUE?}" ;;
                ?)  # Display help
                    cleanup
                    syntax ;;
            esac
        done
        shift `expr $OPTIND - 1` # Detele all option args
        INSTNAME="$1"            # Instance name
        if [ -z "${INSTNAME?}" ]; then
            syntax
        fi ;;
esac

set ${setopts?}

trap "stop_prog 2" 1 2 3 15
cleanup                      # Clean up

cleanup_reg_list instance crt ${INSTNAME?}

# Set the dbm cfg file to be used
if [ ${SETCFGFILE?} -eq ${TRUE?} ]; then
    set_cfgfile
fi

# Make sure root instance (UID=0) is not being created
userId=`${DB2DIR?}/bin/db2usrinf -u ${INSTNAME?}`
if [ ${userId:-"0"} -eq 0 ]; then
    display_msg ${DB2CAT?} 131 \
        'DBI1131E The user ID %s is invalid.\n' ${INSTNAME?}
    exit 1
fi

#See if it is sd_copy if so try to set SD_INSTPROF
is_sd_instance
if [ $? -eq ${TRUE?} ]
then
    set_sd_instprof	   # Try to SD_INSTPROF from global reg
    if [ $? -ne ${TRUE?} ]
    then
        echo "Unable to find SD_INSTPROF value from global reg"
        stop_prog ${FALSE?}
    fi
fi

# Initialize the instance creation process
init_icreate

# Create DB2 instance
if [ ${ONLINE_PREPARE_SQLLIB_VER?} -eq ${TRUE?} ]; then
  cr_instance_online
else
  cr_instance
fi

# run sync command to ensure sqllib_shared is synchronized with other members/CFs
if [ ${ONLINE_PREPARE_SQLLIB_VER?} -ne ${TRUE?} ]; then
 find_and_execute /bin/sync
fi

# Modify the instance owner's profile with db2profile
if [ ${ONLINE_PREPARE_SQLLIB_VER?} -eq ${TRUE?} ]; then
  modify_profile_online
  update_instuse_online ${INSTNAME?} InstanceType ${INSTTYPE?}
else
  modify_profile
  # Set the port number for the instance 
  if [ "X${PORTNUM?}" != "X" ]; then
    set_portnum
  fi

  update_instuse ${INSTNAME?} InstanceType ${INSTTYPE?}

fi

# Successful exit
stop_prog 0

