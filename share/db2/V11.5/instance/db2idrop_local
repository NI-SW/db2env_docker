#!/bin/sh
#############################################################################
#
# Licensed Materials - Property of IBM
#
# "Restricted Materials of IBM" 
#
# (C) COPYRIGHT IBM Corp. 1993, 2019 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#############################################################################

#
# NAME: db2idrop
#
# FUNCTION: db2idrop - removes a DB2 instance.
#
# USAGE: db2idrop [-h|-?] InstName
#           InstName  is the name of the instance
#
########################################################################
# Options for "set" command
setopts="${setopts:-+x}"
set ${setopts?}

# Current DB2 installation directory

DB2LOCAL=`echo $DB2LOCAL`

if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/.mount ]; then
   DB2DIR=${DB2LOCAL?}/instance
   curdir=`/bin/pwd`
else
   curdir=`/bin/pwd`
   DB2DIR=`dirname $0`
   cd ${DB2DIR?}
   DB2DIR=`/bin/pwd`
fi

cd ${DB2DIR?}
DB2DIR=`dirname ${DB2DIR?}`
if [ ! -d ${DB2DIR?}/instance ]
then
    DB2DIR=`dirname ${DB2DIR?}`
fi
cfg_tmp="${DB2DIR?}/cfg/installcopy.cfg"
cmd_db2fupdt_tmp="${DB2DIR?}/bin/db2fupdt"
DB2_KEEP_IN_ORIGINAL_DB2DIR="${DB2_KEEP_IN_ORIGINAL_DB2DIR:-FALSE}"

if [ -f "${cfg_tmp?}" -a -f "${cmd_db2fupdt_tmp?}"  -a "X${DB2_KEEP_IN_ORIGINAL_DB2DIR?}" != "XTRUE" ]; then
   db2dir_tmp=`${cmd_db2fupdt_tmp?} -f ${cfg_tmp?} -p DB2DIR`
   if [ $? -eq 0 ]; then
      if [ -d ${db2dir_tmp?} ]; then
         cd ${db2dir_tmp?} 2>/dev/null 1>/dev/null
         if [ $? -eq 0 ]; then
            DB2DIR=`echo ${db2dir_tmp?} | sed 's/\/$//'`
         fi
     fi
   fi
fi 
cd ${curdir?}
unset curdir cfg_tmp cmd_db2fupdt_tmp db2dir_tmp DB2_KEEP_IN_ORIGINAL_DB2DIR

# Set the directory name where this file is located.
curdir=`/bin/pwd`
PROGDIR=`dirname $0`
cd ${PROGDIR?}
PROGDIR=`/bin/pwd`
cd ${curdir?}

PROGNAME=`basename $0`       # Program name
PROGARGS="$*"

# Include common definition file
if [ -f ${PROGDIR?}/db2iutil ]; then
    . ${PROGDIR?}/db2iutil
else
    echo "File ${PROGDIR?}/db2iutil not found."
    echo "Exiting....."
    exit 1
fi

get_locale                # Get the locale name of set message catalog path

DB2LOCAL=`echo $DB2LOCAL`
if [ ! -f ${DB2LOCAL?}/.mount ]; then
     chk_root                  # Check that only root is running this program
fi   

add_servicerec ${PROGNAME?} 0
if [ $? -ne 0 ]; then
   exit 67
fi

#-----------------------------------------------------------------------#
#               Start of function definitions
#-----------------------------------------------------------------------#

# To display the command syntax
syntax ()
{
    display_msg ${DB2CAT?} 6 \
       'DBI1006I Usage: %s [-h|-?] InstName' ${PROGNAME?}
    cleanup yes 
    exit 1
}

# Default values for command line options
defaultopts ()
{
    trac defaultopts $@

    DEBUG=1               # Debug mode is FALSE
    INSTNAME=""           # Initialize variable for instance name
    INSTTYPE=${ITYPE_UNK?}   # Initialize variable for instance type as UNKNOWN

    trax defaultopts
}

#-----------------------------------------------------------------------#
#                End of function definitions
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
#                             Main program
#-----------------------------------------------------------------------#

defaultopts        # Define default values for command-line options

DB2LOCAL=`echo $DB2LOCAL`
if [ ! -f ${DB2LOCAL?}/.mount ]; then
   checkRPATH
fi

# Process command-line options
case $# in
    0)
        syntax ;;
    *)
        while getopts :hd optchar; do
            case ${optchar?} in
                d)  # Turn debug mode on
                    DEBUG=0
                    setopts="-x" ;;
                ?)  # Display help
                    cleanup
                    syntax ;;
            esac
        done
        shift `expr $OPTIND - 1` # Detele all option args
        INSTNAME="$1"              # Instance name
        if [ -z "${INSTNAME?}" ]; then
            syntax
        fi ;;
esac

set ${setopts?}

trap "stop_prog 2" 1 2 3 15
cleanup                      # Clean 

get_instance ${INSTNAME?}
chk_itype

# Check to see if a Query Patroller Instance is installed.  If it is, drop it
if [ -x ${DB2DIR?}/instance/dqplist ]; then
    findwordinstr ${INSTNAME?} "`${DB2DIR?}/instance/dqplist`"
    if [ $? -eq ${TRUE?} ]; then
        ${DB2DIR?}/instance/dqpdrop ${INSTNAME?}
    fi
fi

# Drop DB2 instance
drop_instance

# run sync command to ensure sqllib_shared is synchronized with other members/CFs
find_and_execute /bin/sync

# Successful exit
stop_prog 0

