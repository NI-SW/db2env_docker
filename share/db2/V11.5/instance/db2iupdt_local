#!/bin/sh
#############################################################################
#
# Licensed Materials - Property of IBM
#
# "Restricted Materials of IBM" 
#
# (C) COPYRIGHT IBM Corp. 1993, 2019 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#############################################################################

#
# NAME: db2iupdt
#
# FUNCTION: db2iupdt - update a DB2 instance after installation/removal:
#                         - of a new DB2 release (of the same version)
#                         - of additional DB2 products
#                           (eg. updating a client to a server)
#                         - of a patch/PTF
#
# USAGE: db2iupdt [-h|-?] [-d] [-k] [-s] [-a AuthType] [-u FencedID] InstName
#          -h|-?         display the usage information.
#          -d            turn debug mode on.
#          -k            keep the current instance type during update.
#          -s            ignore existing SPM log directory 
#          AuthType      is the authentication type (SERVER, CLIENT or DCS)
#                        for the instance. The default is SERVER.
#          FencedID      is the name of user ID under which fenced User
#                        Defined Functions and fenced Stored Procedures will run.
#          InstName      is the name of the instance.
#
# NOTE: For security reasons, it is recommended that you do not use 
#       the instance name as the FencedID. However, if you are not 
#       planning to use fenced User Defined Functions (UDFs) or fenced
#       Stored Procedures then setting the FencedID same as InstName may
#       save you the step of having to create another user for the FencedID.
#
########################################################################
# Options for "set" command
setopts="${setopts:-+x}"
set ${setopts?}

# Current DB2 installation directory

DB2LOCAL=`echo $DB2LOCAL`

if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/.mount ]; then
   DB2DIR=${DB2LOCAL?}/instance
   curdir=`/bin/pwd`
else
   curdir=`/bin/pwd`
   DB2DIR=`dirname $0`
   cd ${DB2DIR?}
   DB2DIR=`/bin/pwd`
fi

cd ${DB2DIR?}
DB2DIR=`dirname ${DB2DIR?}`
if [ ! -d ${DB2DIR?}/instance ]
then
    DB2DIR=`dirname ${DB2DIR?}`
fi
cfg_tmp="${DB2DIR?}/cfg/installcopy.cfg"
cmd_db2fupdt_tmp="${DB2DIR?}/bin/db2fupdt"
DB2_KEEP_IN_ORIGINAL_DB2DIR="${DB2_KEEP_IN_ORIGINAL_DB2DIR:-FALSE}"

if [ -f "${cfg_tmp?}" -a -f "${cmd_db2fupdt_tmp?}"  -a "X${DB2_KEEP_IN_ORIGINAL_DB2DIR?}" != "XTRUE" ]; then
   db2dir_tmp=`${cmd_db2fupdt_tmp?} -f ${cfg_tmp?} -p DB2DIR`
   if [ $? -eq 0 ]; then
      if [ -d ${db2dir_tmp?} ]; then
         cd ${db2dir_tmp?} 2>/dev/null 1>/dev/null
         if [ $? -eq 0 ]; then
            DB2DIR=`echo ${db2dir_tmp?} | sed 's/\/$//'`
         fi
     fi
   fi
fi 
cd ${curdir?}
unset curdir cfg_tmp cmd_db2fupdt_tmp db2dir_tmp DB2_KEEP_IN_ORIGINAL_DB2DIR

# Set the directory name where this file is located.
curdir=`/bin/pwd`
PROGDIR=`dirname $0`
cd ${PROGDIR?}
PROGDIR=`/bin/pwd`
cd ${curdir?}

PROGNAME=`basename $0`       # Program name
PROGARGS="$*"

# Include common definition file
if [ -f ${PROGDIR?}/db2iutil ]; then
    . ${PROGDIR?}/db2iutil
else
    echo "File ${PROGDIR?}/db2iutil not found."
    echo "Exiting..."
    exit 1
fi

get_locale         # Get the locale name of set message catalog path
chk_root           # Check that only root is running this program
add_servicerec ${PROGNAME?} 0
if [ $? -ne 0 ]; then
   exit 67
fi

#-----------------------------------------------------------------------#
#               Start of function definitions
#-----------------------------------------------------------------------#
DB2DLNK=${FALSE?}

# To display the help menu
help()
{
    display_msg ${DB2CAT?} 11 \
        'DBI1011E Usage: %s [-h|-?] [-d] [-k] [-s] [-a AuthType] [-u FencedID] InstName' \
        ${PROGNAME?}
    cleanup yes 
    exit 1
}

# Default values for command line options
defaultopts()
{
    set ${setopts?}
    DEBUG=1                 # Debug mode is FALSE
    EVERYTHING=1            # Update everything
    AUTHTYPE="SERVER"       # Default authentication type
    INSTNAMEARG=""          # Initialize variable for instance name
    FENCEDIDARG=""          # Initialize variable for Fenced userid
    CFGFILE=""              # Initialize variable for default DBM cfg file
    INSTTYPE=${ITYPE_UNK?}  # Initialize variable for instance type as UNKNOWN
    FORCEICRT=1
    IUPDTDOWN=1             # Does not allow updating to down level code
    CURBLDLVL=""
    FORCEDPF=1              # force DPF update on non-instance owning node if set to true
    KEEPITYPE=${FALSE?}

    ISDB2SSHID="${FALSE?}"
    DB2SSHUSERNAME=""
    DB2SSHGROUP=""
    ONLINE_PREPARE_SQLLIB_VER=${FALSE?}

}

update_instance_()
{
    set ${setopts?}
    # instance to update.
    INSTNAME=$1

    # Initialize the instance update process
    FENCEDID=${FENCEDIDARG?}

    # update DB2 instance
    init_iupdate
	
	#For sd copy we will NOT init instprof if keepType and non-SD is passed
    is_sd_copy
    if [ $? -eq ${TRUE?} ]
    then
        if [ ${KEEPITYPE?} -ne ${TRUE?} ] || [ ${INSTTYPE?} -eq ${ITYPE_SD?} ]
        then
            set_sd_instprof        # Try to SD_INSTPROF from global reg
            if [ $? -ne ${TRUE?} ]
            then
                echo "Unable to find SD_INSTPROF value from global reg"
                stop_prog ${FALSE?}
            fi
        fi
    fi
	
    update_instance

    log_instance_activity $?

}

#-----------------------------------------------------------------------#
#                End of function definitions
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
#                             Main program
#-----------------------------------------------------------------------#

defaultopts        # Define default values for command-line options
checkRPATH

# Process command-line options
case $# in
    0)
        help ;;
    *)
        BACKUP_SPM=1 
        while getopts :a:u:hdDkseFN optchar; do
            case ${optchar?} in
                a)  # Authentication type
                    AUTHTYPE="${OPTARG?}" ;;
                e)  # Everything!
                    EVERYTHING=0 ;;
                u)  # FencedID user name
                    FENCEDIDARG="${OPTARG?}" ;;
                d)  # Turn debug mode on
                    DEBUG=0
                    setopts="-x" ;;
                D)  # Allow updating to downlevel code
                    IUPDTDOWN=0  ;;
                k)  # Keep the instance type during update
                    KEEPITYPE=${TRUE?} ;;
                s)  # Back up the SPM directory
                    BACKUP_SPM=0 ;;
                F)  # Force instance creation even if prereq. filesets not present
                    FORCEICRT=0 ;;
                N)  # Force DPF instance update on non-instance owning node
                    FORCEDPF=0 ;;
                \?) # Display help
                    cleanup
                    help ;;
            esac
        done
        shift `expr $OPTIND - 1` # Detele all option args
        INSTNAMEARG="$1"            # Instance name
        if [ -z "${INSTNAMEARG?}" -a ${EVERYTHING?} -eq ${FALSE?} ]; then
            help
        fi ;;
esac

set ${setopts?}

trap "stop_prog 2" 1 2 3 15
cleanup                      # Clean up

if [ ${EVERYTHING?} -eq ${TRUE?} ]
then

    # The flags are all constant from instance to instance, making this
    # "easy" yet a little more dangerous.  Anyone using this is assumed
    # to be running a relatively homogeneous set of instances on a
    # machine.  If this is not the case, it is better to update each
    # instance individually, with instance-specific flags.

    for inst in `${DB2DIR?}/instance/db2ilist`
    do
        echo "${inst?}"
        update_instance_ ${inst?}
    done

else
    update_instance_ ${INSTNAMEARG?}
fi

# run sync command to ensure sqllib_shared is synchronized with other members/CFs
find_and_execute /bin/sync

# Successfu exit
stop_prog ${TRUE?}

