#!/bin/sh
#############################################################################
#
# Licensed Materials - Property of IBM
#
# "Restricted Materials of IBM" 
#
# (C) COPYRIGHT IBM Corp. 1993, 2019 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#############################################################################

#
# NAME: db2iinfo
#
# FUNCTION: Backup useful information about the instance before
#           instance migration and update
#
#############################################################################

# Options for "set" command
setopts="${setopts:-+x}"
set ${setopts?}

# Current DB2 installation directory

DB2LOCAL=`echo $DB2LOCAL`

if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/.mount ]; then
   DB2DIR=${DB2LOCAL?}/instance
   curdir=`/bin/pwd`
else
   curdir=`/bin/pwd`
   DB2DIR=`dirname $0`
   cd ${DB2DIR?}
   DB2DIR=`/bin/pwd`
fi

cd ${DB2DIR?}
DB2DIR=`dirname ${DB2DIR?}`
if [ ! -d ${DB2DIR?}/instance ]
then
    DB2DIR=`dirname ${DB2DIR?}`
fi
cfg_tmp="${DB2DIR?}/cfg/installcopy.cfg"
cmd_db2fupdt_tmp="${DB2DIR?}/bin/db2fupdt"
DB2_KEEP_IN_ORIGINAL_DB2DIR="${DB2_KEEP_IN_ORIGINAL_DB2DIR:-FALSE}"

if [ -f "${cfg_tmp?}" -a -f "${cmd_db2fupdt_tmp?}"  -a "X${DB2_KEEP_IN_ORIGINAL_DB2DIR?}" != "XTRUE" ]; then
   db2dir_tmp=`${cmd_db2fupdt_tmp?} -f ${cfg_tmp?} -p DB2DIR`
   if [ $? -eq 0 ]; then
      if [ -d ${db2dir_tmp?} ]; then
         cd ${db2dir_tmp?} 2>/dev/null 1>/dev/null
         if [ $? -eq 0 ]; then
            DB2DIR=`echo ${db2dir_tmp?} | sed 's/\/$//'`
         fi
     fi
   fi
fi 
cd ${curdir?}
unset curdir cfg_tmp cmd_db2fupdt_tmp db2dir_tmp DB2_KEEP_IN_ORIGINAL_DB2DIR

# Check for migration flag
if [ "$1" = "-m" ]; then
    MIGRATE=0
    shift
else
    MIGRATE=1
fi

INSTNAME=$1
INSTHOME=$2
BACKUPDIR=$3

ProgName=`basename $0`            # Program name

# Spacial variables - names for backup files
OLDDB2SYSTM="db2systm.old"      # Old db2systm file
OLDDB2PROFILE="userprofile.old"  # Old userprofile
OLDDB2CSHRC="usercshrc.old"      # Old usercshrc
LSTDBDIR="dbdir.lst"            # List sys db dir
LSTNODEDIR="nodedir.lst"        # List node dir
LSTDCSDIR="dcsdir.lst"          # List dcs gateway dir
LSTDBMCFG="dbmcfg.lst"          # List dbm cfg file

# Error codes
EXIT_DIR_ERR=2
EXIT_WRITE_ERR=3

#-----------------------------------------------------------------------#
#               Start of function definitions
#-----------------------------------------------------------------------#

# exit function
exit_db2iinfo()
{
    set ${setopts?}
    exitcode=${1:-1}     # Exit code, default 1
    exit ${exitcode?}
}

# Sets the environment variables for the instance
set_instenv()
{
    set ${setopts?}
    # Set DB2INSTANCE.
    DB2INSTANCE=${INSTNAME?}
    export DB2INSTANCE

    # Append the DB2 directories to the PATH.
    PATH=${PATH}:${INSTHOME?}/sqllib/bin:${INSTHOME?}/sqllib/adm
    PATH=${PATH}:${INSTHOME?}/sqllib/misc
    export PATH
}

# Backup dbm config file for the instance
backup_dbmcfg()
{
    set ${setopts?}
    # Backup DBM config file
    cp ${INSTHOME?}/sqllib/db2systm ${BACKUPDIR?}/${OLDDB2SYSTM?}
    if [ $? -ne 0 ]; then
       exit_db2iinfo ${EXIT_WRITE_ERR?}
    fi

    # List and save database manager config parameters
    db2 get dbm cfg > ${BACKUPDIR?}/${LSTDBMCFG?}
    return 0
}

# Backup database/node dir info for the instance
backup_dbinfo()
{
    set ${setopts?}
    # Backup files
    if [ -f ${INSTHOME?}/sqllib/userprofile ]; then
        cp ${INSTHOME?}/sqllib/userprofile ${BACKUPDIR?}/${OLDDB2PROFILE?}
        if [ $? -ne 0 ]; then
           exit_db2iinfo ${EXIT_WRITE_ERR?}
        fi
    fi
    if [ -f ${INSTHOME?}/sqllib/usercshrc ]; then
        cp ${INSTHOME?}/sqllib/usercshrc ${BACKUPDIR?}/${OLDDB2CSHRC?}
        if [ $? -ne 0 ]; then
           exit_db2iinfo ${EXIT_WRITE_ERR?}
        fi
    fi

    # Backup system database directory, node directory,
    # DCS gateway directory information
    db2 list database directory > ${BACKUPDIR?}/${LSTDBDIR?}
    db2 list node directory > ${BACKUPDIR?}/${LSTNODEDIR?}
    db2 list dcs directory > ${BACKUPDIR?}/${LSTDCSDIR?}
    return 0
}

#-----------------------------------------------------------------------#
#                End of function definitions
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
#                             Main program
#-----------------------------------------------------------------------#

trap "exit_db2iinfo 1" 1 2 3 15 

# Check is the backup dir exists
if [ ! -d ${BACKUPDIR?} ]; then
    mkdir ${BACKUPDIR?}
    if [ $? -ne 0 ]; then
        exit_db2iinfo ${EXIT_DIR_ERR?}
    fi
fi

# Set the instance environment
set_instenv

# Backup dbm config file for the instance
backup_dbmcfg

# Backup info db dir info for the instance
if [ ${MIGRATE?} -eq 0 ]; then
    backup_dbinfo
fi

exit_db2iinfo $?

