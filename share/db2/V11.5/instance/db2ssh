#!/bin/sh
#############################################################################
#
# Licensed Materials - Property of IBM
#
# "Restricted Materials of IBM" 
#
# (C) COPYRIGHT IBM Corp. 1993, 2019 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#############################################################################

#
# NAME: db2ssh
#
# FUNCTION: This is intended for SSH setup of instance user for SD instance creation
#           Appends every entry of INSTPROF/INSTANCE/.ssh/authorized_keys 
#           to HOME/.ssh/authorized_keys for each host.
#
# RETURNS: 0 if successful, 1 otherwise
#

# Options for "set" command
setopts="${setopts:-+x}"
set ${setopts?}

#Current DB2 installation directory

DB2LOCAL=`echo $DB2LOCAL`

if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/.mount ]; then
   DB2DIR=${DB2LOCAL?}/instance
   curdir=`/bin/pwd`
else
   curdir=`/bin/pwd`
   DB2DIR=`dirname $0`
   cd ${DB2DIR?}
   DB2DIR=`/bin/pwd`
fi

cd ${DB2DIR?}
DB2DIR=`dirname ${DB2DIR?}`
if [ ! -d ${DB2DIR?}/instance ]
then
    DB2DIR=`dirname ${DB2DIR?}`
fi
cfg_tmp="${DB2DIR?}/cfg/installcopy.cfg"
cmd_db2fupdt_tmp="${DB2DIR?}/bin/db2fupdt"
DB2_KEEP_IN_ORIGINAL_DB2DIR="${DB2_KEEP_IN_ORIGINAL_DB2DIR:-FALSE}"

if [ -f "${cfg_tmp?}" -a -f "${cmd_db2fupdt_tmp?}"  -a "X${DB2_KEEP_IN_ORIGINAL_DB2DIR?}" != "XTRUE" ]; then
   db2dir_tmp=`${cmd_db2fupdt_tmp?} -f ${cfg_tmp?} -p DB2DIR`
   if [ $? -eq 0 ]; then
      if [ -d ${db2dir_tmp?} ]; then
         cd ${db2dir_tmp?} 2>/dev/null 1>/dev/null
         if [ $? -eq 0 ]; then
            DB2DIR=`echo ${db2dir_tmp?} | sed 's/\/$//'`
         fi
     fi
   fi
fi 
cd ${curdir?}
unset curdir cfg_tmp cmd_db2fupdt_tmp db2dir_tmp DB2_KEEP_IN_ORIGINAL_DB2DIR

TRUE=0                     # True variable
FALSE=1                    # False variable
export TRUE FALSE
FIXPACK=${FALSE?}

#Set the directory name where this file is located
curdir=`/bin/pwd`
PROGDIR=`dirname $0`
cd ${PROGDIR?}
PROGDIR=`/bin/pwd`
cd ${curdir?}

PROGNAME=`basename $0` # Program name

#Include common definition files
if [ -f ${PROGDIR?}/db2iutil ]; then
    . ${PROGDIR?}/db2iutil
else
    echo "File ${PROGDIR?}/db2iutil not found."
    echo "Exiting..."
fi

get_locale

#-----------------------------------------------------------------------#
#               Start of function definitions
#-----------------------------------------------------------------------#

initialization()
{
    set ${setopts?}
    DEBUG=${FALSE?}
    KEY_LIST=""
    INSTNAME=""
    INSTHOME=""
    FILENAME=""
    PROFFROMURE=""
    UPDATE_KEYS=${FALSE?}
    CREATE_EMPTY_KEY=${FALSE?}
    SET_SSH=${FALSE?}
}

syntax ()
{
    echo "Usage: db2ssh -u instname [-a | -c | -s] hostlist"
    echo "If -s is used, hostlist needs to be the last argument"
    exit 67
}

#-----------------------------------------------------------------------#
#                             Main program
#-----------------------------------------------------------------------#
initialization
   
# Process command-line options
while getopts :u:s:p:dhac optchar; do
    case ${optchar?} in
        u)   if [ "X${OPTARG?}" = "X" ]; then
                syntax
             else
                INSTNAME=${OPTARG?}
             fi
             ;;
        a)   # Append all entries in sd_instprof authorized_keys to user authorized_keys
             UPDATE_KEYS=${TRUE?}
             ;;
        c)   # Create an empty authorized_keys in sd_instprof/instance/.ssh
             CREATE_EMPTY_KEY=${TRUE?}
             ;;
        s)   # First time setup of ssh to other hosts
             SET_SSH=${TRUE?}
             if [ "X${OPTARG?}" = "X" ]; then
                syntax
             else
                FILENAME=${OPTARG?}
             fi
             ;;
        d)   # Turn debug mode on
             DEBUG=${TRUE?}
             setopts="-x"
             ;;
        p)   
	     # contains the SD_INSTPROF passed from URE while setting passwordless SSH
	     # for non-instance owner
	     if [ "X${OPTARG?}" = "X" ];
	     then
	         syntax
	     else
	         PROFFROMURE=${OPTARG?}
             fi
	     ;;
        h|*) syntax
             ;;
    esac
done

set ${setopts?}

# INSTNAME cannot be empty
if [ "X${INSTNAME?}" = "X" ]; then
   syntax
fi
INSTHOME=`${DB2DIR?}/bin/db2usrinf -d ${INSTNAME?}`

set_sd_instprof
if [ $? -ne ${TRUE?} ]; then
   if [ "X${PROFFROMURE?}" = "X" ];
   then
       echo "Unable to find SD_INSTPROF value from global registry."
       stop_prog ${FALSE?}
   else
       SD_INSTPROF=${PROFFROMURE?}
   fi  
fi

SD_SSHDIR="${SD_INSTPROF?}/${INSTNAME?}/.ssh"

if [ ${UPDATE_KEYS?} -eq ${TRUE?} ]; then
   if [ -f ${SD_SSHDIR?}/authorized_keys ]; then
      cat ${SD_SSHDIR?}/authorized_keys | while read line
      do
         grep -- "${line?}" ${INSTHOME?}/.ssh/authorized_keys 2>&1 1>/dev/null
         if [ $? -ne ${TRUE?} ]; then
            echo ${line?} >> ${INSTHOME?}/.ssh/authorized_keys
         fi
      done
   else
      echo "The file ${SD_SSHDIR?}/authorized_keys does not exist"
      stop_prog ${FALSE?}
   fi
fi

if [ ${CREATE_EMPTY_KEY?} -eq ${TRUE?} ]; then
   if [ ! -d ${SD_INSTPROF?}/${INSTNAME?} ]; then
      mkdir ${SD_INSTPROF?}/${INSTNAME?} 2>&1 1>/dev/null
      if [ $? -ne ${TRUE?} ]; then
         echo "Unable to create ${SD_INSTPROF?}/${INSTNAME?}"
         stop_prog ${FALSE?}
      fi
   fi
   if [ ! -d ${SD_SSHDIR?} ]; then
      mkdir ${SD_SSHDIR?} 2>&1 1>/dev/null
      if [ $? -ne ${TRUE?} ]; then
         echo "Unable to create ${SD_SSHDIR?}"
         stop_prog ${FALSE?}
      fi
   fi
   if [ ! -f ${SD_SSHDIR?}/authorized_keys ]; then
      touch ${SD_SSHDIR?}/authorized_keys 2>&1 1>/dev/null  
      if [ $? -ne ${TRUE?} ]; then
         echo "Unable to create ${SD_SSHDIR?}/authorized_keys"
         stop_prog ${FALSE?}
      fi
   fi
fi

if [ ${SET_SSH?} -eq ${TRUE?} ]; then
   if [ -f ${FILENAME?} ]; then
      HOSTLIST=`cat ${FILENAME?}`
      for host in ${HOSTLIST?}; do
         ${DB2DIR?}/instance/db2iexec ${INSTNAME?} "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=3 -o BatchMode=yes ${host?} date" 2>&1 1>/dev/null
         if [ $? -ne ${TRUE?} ]; then
            lock ${SD_SSHDIR?}/ssh_con_setup.lock
               echo Error for SSH connection setup SSH from `hostname` to ${host?} >> ${SD_SSHDIR?}/ssh_con_setup.err
            unlock ${SD_SSHDIR?}/ssh_con_setup.lock
         fi
      done
   else
      echo "The file ${FILENAME?} does not exist"
      stop_prog ${FALSE?}
   fi
fi

stop_prog 0
