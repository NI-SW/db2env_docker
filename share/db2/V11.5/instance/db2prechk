#!/bin/sh
#############################################################################
#
# Licensed Materials - Property of IBM
#
# "Restricted Materials of IBM" 
#
# (C) COPYRIGHT IBM Corp. 1993, 2019 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#############################################################################

#
# NAME: db2prechk
#
# FUNCTION: db2prechk - Check system before installation
#
# USAGE: db2prechk [-h|-?] [-d] -i|-b
#
#          -h|-?            Display the usage information.
#          -d               Turn debug mode on.
#          -i               As instance user, check if dbm is stopped.
#          -b               As installer, check if there is any db2 lib loaded under the current install path.
#
# EXIT Status : 0 - Checking is OK (dbm stopped, or no db2 lib loaded)
#               1 - Checking does not pass (dbm not stopped, or db2 lib still loaded)
#               2 - Checking unknown (cannot determine)
#               3 - Checking does not pass (instance not accessible on node)
#
########################################################################

#-----------------------------------------------------------------------#
#                    Variable and CONSTANTS Definition
#-----------------------------------------------------------------------#
# Options for "set" command
setopts="${setopts:-+x}"
set ${setopts?}

# Current DB2 installation directory

DB2LOCAL=`echo $DB2LOCAL`

if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/.mount ]; then
   DB2DIR=${DB2LOCAL?}/instance
   curdir=`/bin/pwd`
else
   curdir=`/bin/pwd`
   DB2DIR=`dirname $0`
   cd ${DB2DIR?}
   DB2DIR=`/bin/pwd`
fi

cd ${DB2DIR?}
DB2DIR=`dirname ${DB2DIR?}`
if [ ! -d ${DB2DIR?}/instance ]
then
    DB2DIR=`dirname ${DB2DIR?}`
fi
cfg_tmp="${DB2DIR?}/cfg/installcopy.cfg"
cmd_db2fupdt_tmp="${DB2DIR?}/bin/db2fupdt"
DB2_KEEP_IN_ORIGINAL_DB2DIR="${DB2_KEEP_IN_ORIGINAL_DB2DIR:-FALSE}"

if [ -f "${cfg_tmp?}" -a -f "${cmd_db2fupdt_tmp?}"  -a "X${DB2_KEEP_IN_ORIGINAL_DB2DIR?}" != "XTRUE" ]; then
   db2dir_tmp=`${cmd_db2fupdt_tmp?} -f ${cfg_tmp?} -p DB2DIR`
   if [ $? -eq 0 ]; then
      if [ -d ${db2dir_tmp?} ]; then
         cd ${db2dir_tmp?} 2>/dev/null 1>/dev/null
         if [ $? -eq 0 ]; then
            DB2DIR=`echo ${db2dir_tmp?} | sed 's/\/$//'`
         fi
     fi
   fi
fi 
cd ${curdir?}
unset curdir cfg_tmp cmd_db2fupdt_tmp db2dir_tmp DB2_KEEP_IN_ORIGINAL_DB2DIR

# Set the directory name where this file is located.
curdir=`/bin/pwd`
PROGDIR=`dirname $0`
cd ${PROGDIR?}
PROGDIR=`/bin/pwd`
cd ${curdir?}

PROGNAME=`basename $0`

# Include common definition file
if [ -f ${PROGDIR?}/db2iutil ]; then
    . ${PROGDIR?}/db2iutil
else
    echo "File ${PROGDIR?}/db2iutil not found."
    echo "Exiting..."
    exit 2
fi

get_locale         # Get the locale name of set message catalog path

setopts="+x"

#Constant string values:
DBM_CHECK_STR="DBM_CHECK"
LIB_CHECK_STR="LIB_CHECK"
TRUE=0
FALSE=1

# Variable defines
D_OPTION=${FALSE?}

# String Variables initialized
checkAction=""           # What checking is needed
instName=""         # Instance Name (Supplied)
instHome=""         # Home directory of Instance
chkRec=""           # File containing the record of checking

#-----------------------------------------------------------------------#
#                         Function Definitions
#-----------------------------------------------------------------------#

#Display command usage
#This tool is internal, DBI msg is not needed for now.
usage ()
{
    display_msg ${DB2CAT?} 0 \
       'DBI1000E Usage: %s [-h|-?] [-d] -i|-b' \
        ${PROGNAME?}
    exit 2
}

# Finds home directory of user
findHomeDir ()
{
    trac findHomeDir $@
    set ${setopts?}
    rc=0

    if [ "x${instName?}" = "x" ]; then
        instName=`${DB2DIR?}/bin/db2usrinf -n -E`
    fi

    ${DB2DIR?}/bin/db2usrinf -q ${instName?}
    if [ $? -eq 0 ]; then
        instHome=`${DB2DIR?}/bin/db2usrinf -d ${instName?}`
    else
        display_msg ${DB2CAT?} 131 \
            'DBI1131E The user ID %s is invalid.' ${instName?}
        rc=2
    fi

    trax findHomeDir
    return ${rc?}
}

libchk ()
{
    trac libchk $@
    set ${setopts?}
    rc=0
    if [ `${DB2DIR?}/bin/db2usrinf -E` -ne 0 ]; then
    chkList="${DB2DIR?}/lib32/libdb2locale*     \
             ${DB2DIR?}/lib64/libdb2locale*     \
             "
    else
    chkList="${DB2DIR?}/lib32/libdb2locale*     \
             ${DB2DIR?}/lib32/libdb2osse*       \
             ${DB2DIR?}/lib64/libdb2locale*     \
             ${DB2DIR?}/lib64/libdb2osse*       \
             "
    fi
    for element in ${chkList?}; do
        _libchk ${element?}
        t_rc=$?
        if [ ${t_rc?} -ne 0 ]; then
            rc=${t_rc?}
            if [ ${D_OPTION?} -eq ${TRUE?} ]; then
                echo "${element?}: IN USE"
            fi
            break
        fi
        if [ ${D_OPTION?} -eq ${TRUE?} ]; then
            echo "${element?}: NOT IN USE"
        fi
    done
    trax libchk
    return ${rc?}
}

dbmchk ()
{
    trac dbmchk $@
    set ${setopts?}
    rc=0
    hostlist=""
    host_not_stopped=""
    host_not_accessible=""
    rec_dir=""

    findHomeDir
    rc=$?
    if [ ${rc?} -eq 0 -a -d ${instHome?}/sqllib ]; then
        rec_dir=${instHome?}/sqllib/ctrl/.dbmchk
        rm -rf ${rec_dir?}
        mkdir -p ${rec_dir?}
        hostlist="${rec_dir?}/.hostlist"
        host_not_stopped="${rec_dir?}/.host_not_stopped"
        touch ${host_not_stopped?}
        host_not_accessible="${rec_dir?}/.host_not_accessible"
        touch ${host_not_accessible?}

        file_db2node="${instHome?}/sqllib/db2nodes.cfg"
        if [ -f ${file_db2node?} ]; then
            is_purescale
            if [ $? -eq 0 ]; then
                # use db2instance to check instance stopped
                run_db2instance
            else
                if [ `cut -d' ' -f2 < ${file_db2node?}  2>/dev/null | sort -u |wc -l` -gt 1 ]; then
                   cut -d' ' -f2 < ${file_db2node?} | sort -u > ${hostlist?}
                   ${instHome?}/sqllib/bin/rah ";${PROGDIR?}/db2dbmchk ${instHome?}" 1>/dev/null 2>/dev/null
                else
                   hostname > ${hostlist?}
                   ${PROGDIR?}/db2dbmchk ${instHome?} 1>/dev/null 2>/dev/null
                fi
            fi
        else
            hostname > ${hostlist?}
            ${PROGDIR?}/db2dbmchk ${instHome?} 1>/dev/null 2>/dev/null
        fi

        #read hostlist and if we find <host>.failure, then it's not stopped and if we cannot find <host>.*, then it's not accessible
        cat ${hostlist?}|while read host; do
            if [ -f ${rec_dir?}/${host?}.failure ]; then
                echo ${host?} >> ${host_not_stopped?}
            elif [ ! -f ${rec_dir?}/${host?}.success ]; then
                echo ${host?} >> ${host_not_accessible?}
            fi
        done

        if  [ `wc -l < ${host_not_accessible?}` -gt 0 ]; then
            rc=3
            hostList=`cat ${host_not_accessible?}`
            display_msg ${DB2CAT?} 165 \
                'DBI1165E Instance %s is not accessible on the following nodes:\n' ${instName?} ${hostList?}
        fi
        if  [ `wc -l < ${host_not_stopped?}` -gt 0 ]; then
            rc=1
            hostList=`cat ${host_not_stopped?}`
            display_msg ${DB2CAT?} 166 \
                'DBI1166E Instance %s is not stopped on the following nodes:\n' ${instName?} ${hostList?}
        fi
        rm -rf ${rec_dir?}
    else
        rc=3
        display_msg ${DB2CAT?} 165 \
            'DBI1165E Instance %s is not accessible on the following nodes:\n' ${instName?} `hostname`
    fi

    trax dbmchk
    return ${rc?}
}

is_purescale ()
{
    trac is_purescale $@
    set ${setopts?}
    is_purescale_rc=1
    SDInstance=`${instHome?}/sqllib/bin/db2fupdt -f ${instHome?}/sqllib/.instuse -p SDInstance`
    if [ "X${SDInstance?}" != "X" ]; then
        is_purescale_rc=0
    fi
    trax is_purescale
    return ${is_purescale_rc?}
}

run_db2instance ()
{
    trac run_db2instance $@
    set ${setopts?}
    instance_cmd=${instHome?}/sqllib/bin/db2instance
    run_db2instance_rc=0
    if [ -x ${instance_cmd?} ]; then
        ${instance_cmd?} -list > ${rec_dir?}/db2instance.out
        m_count=`cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /MEMBER/) {print}}' | wc -l`
        m_stop_count=`cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /MEMBER/ && $3 ~ /STOPPED/) {print}}'| wc -l`
        m_unknown_count=`cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /MEMBER/ && $3 ~ /UNKNOWN/) {print}}' | wc -l`
        m_sum=`expr ${m_stop_count?} + ${m_unknown_count?}`
        cf_count=`cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /CF/) {print}}' | wc -l`
        cf_stop_count=`cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /CF/ && $3 ~ /STOPPED/) {print}}'| wc -l`
        cf_unknown_count=`cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /CF/ && $3 ~ /UNKNOWN/) {print}}' | wc -l`
        cf_sum=`expr ${cf_stop_count?} + ${cf_unknown_count?}`
        cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /MEMBER|CF/) {print $4}}' | sort -u > ${hostlist?}

        if [ ${m_count?} -gt 0 ]; then
            if [ ${m_stop_count?} -eq 0 -o ${m_sum?} -ne ${m_count?} ]; then
                run_db2instance_rc=1
                #create ${rec_dir?}/${host?}.failure
                cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /MEMBER/ && $3 !~ /STOPPED/) {print $4}}' | while read host; do
                    if [ ! -f ${rec_dir?}/${host?}.failure ]; then
                        touch ${rec_dir?}/${host?}.failure
                    fi
                done
            fi
            #always create ${rec_dir?}/${host?}.success
            #note UNKNOWN may be considered failure so we need to clean up later
            cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /MEMBER/ && $3 ~ /STOPPED|UNKNOWN/) {print $4}}' | while read host; do
                if [ ! -f ${rec_dir?}/${host?}.success ]; then
                    touch ${rec_dir?}/${host?}.success
                fi
            done
        fi

        if [ ${cf_count?} -gt 0 ]; then
            if [ ${cf_stop_count?} -eq 0 -o ${cf_sum?} -ne ${cf_count?} ]; then
                run_db2instance_rc=1
                #create ${rec_dir?}/${host?}.failure
                cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /CF/ && $3 !~ /STOPPED/) {print $4}}' | while read host; do
                    if [ ! -f ${rec_dir?}/${host?}.failure ]; then
                        touch ${rec_dir?}/${host?}.failure
                    fi
                done
            fi
            #always create ${rec_dir?}/${host?}.success
            #note UNKNOWN may be considered failure so we need to clean up later
            cat ${rec_dir?}/db2instance.out | awk '{if ($2 ~ /CF/ && $3 ~ /STOPPED|UNKNOWN/) {print $4}}' | while read host; do
                if [ ! -f ${rec_dir?}/${host?}.success ]; then
                    touch ${rec_dir?}/${host?}.success
                fi
            done
        fi

        #rm ${rec_dir?}/${host?}.success if ${rec_dir?}/${host?}.failure exists
        #this means if a CF/M of double up is not both stopped or not all of the MLNs of a M are stopped
        #the host is treated as failure
        cat ${hostlist?} | while read host; do
            if [ -f ${rec_dir?}/${host?}.success -a -f ${rec_dir?}/${host?}.failure ]; then
                rm ${rec_dir?}/${host?}.success
            fi
        done
    fi
    trax run_db2instance
    return ${run_db2instance_rc?}
}

#-----------------------------------------------------------------------#
#                         Main Program
#-----------------------------------------------------------------------#

# Process command-line options
case $# in
    0)
        usage
    ;;
    *)
        while getopts :bihd optchar; do
            case ${optchar?} in
                b)  # check db2 lib loading
                    checkAction="${LIB_CHECK_STR?}" 
                    ;;
                i)  # check dbm
                    checkAction="${DBM_CHECK_STR?}" 
                    ;;
                d)  # Turn debug mode on
                    setopts="-x" 
                    D_OPTION=${TRUE?}
                    ;;
              ?|h)  # Display help
                    usage 
                    ;;
            esac
        done
    ;;
esac

set ${setopts?}

rc=0

if [ ${checkAction?} = ${LIB_CHECK_STR?} ]; then
    libchk
    rc=$?
elif [ ${checkAction?} = ${DBM_CHECK_STR?} ]; then
    if [ `${DB2DIR?}/bin/db2usrinf -E` = "0" ]; then
        echo "You should be either instance or das user to run dbm checking"  >2
        rc=2
    else
        dbmchk
        rc=$?
    fi
fi

exit ${rc?}

