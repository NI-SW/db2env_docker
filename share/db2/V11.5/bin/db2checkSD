#!/bin/sh
#############################################################################
#
# Licensed Materials - Property of IBM
#
# "Restricted Materials of IBM" 
#
# (C) COPYRIGHT IBM Corp. 1993, 2019 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#############################################################################

#
# NAME:db2checkSD 
#
# FUNCTION: db2checkSD - verify that a database can be updated to be used in a 
#                        shared-disk environment.
#
# USAGE: db2checkSD <-e|db_name> [-u user] [-p passwd] -l logpath
#          database_name  Specifies the name of a database to be scanned
#          -e             Specifies that all local cataloged databases are to be scanned
#          -l logfile     Mandatory parameter.  Specifies a log file to keep a list of
#                         errors and warnings generated for the scanned database
#          -u userid      Specifies the user ID of the instance owner 
#          -p password    Specifies the password of the instance owner
#
# RETURN: 0 No warnings or errors found
#         1 Warnings found
#         2 Disallowed objects found
#         3 Unexpected errors found
########################################################################

# Options for "set" command
setopts="${setopts:-+x}"
set ${setopts?}

# Current DB2 installation directory

DB2LOCAL=`echo $DB2LOCAL`

if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/.mount ]; then
   DB2DIR=${DB2LOCAL?}/instance
   curdir=`/bin/pwd`
else
   curdir=`/bin/pwd`
   DB2DIR=`dirname $0`
   cd ${DB2DIR?}
   DB2DIR=`/bin/pwd`
fi

cd ${DB2DIR?}
DB2DIR=`dirname ${DB2DIR?}`
if [ ! -d ${DB2DIR?}/instance ]
then
    DB2DIR=`dirname ${DB2DIR?}`
fi
cfg_tmp="${DB2DIR?}/cfg/installcopy.cfg"
cmd_db2fupdt_tmp="${DB2DIR?}/bin/db2fupdt"
DB2_KEEP_IN_ORIGINAL_DB2DIR="${DB2_KEEP_IN_ORIGINAL_DB2DIR:-FALSE}"

if [ -f "${cfg_tmp?}" -a -f "${cmd_db2fupdt_tmp?}"  -a "X${DB2_KEEP_IN_ORIGINAL_DB2DIR?}" != "XTRUE" ]; then
   db2dir_tmp=`${cmd_db2fupdt_tmp?} -f ${cfg_tmp?} -p DB2DIR`
   if [ $? -eq 0 ]; then
      if [ -d ${db2dir_tmp?} ]; then
         cd ${db2dir_tmp?} 2>/dev/null 1>/dev/null
         if [ $? -eq 0 ]; then
            DB2DIR=`echo ${db2dir_tmp?} | sed 's/\/$//'`
         fi
     fi
   fi
fi 
cd ${curdir?}
unset curdir cfg_tmp cmd_db2fupdt_tmp db2dir_tmp DB2_KEEP_IN_ORIGINAL_DB2DIR

# Set the directory name where this file is located.
curdir=`/bin/pwd`
PROGDIR=`dirname $0`
cd ${PROGDIR?}
PROGDIR=`/bin/pwd`
cd ${curdir?}

PROGNAME=`basename $0`       # Program name

# Include common definition file
if [ -f ${DB2DIR?}/instance/db2iutil ]; then
    . ${DB2DIR?}/instance/db2iutil
else
    echo "File ${DB2DIR?}/instance/db2iutil not found."
    echo "Exiting..."
    exit 1
fi

if [ -f ${DB2DIR?}/instance/db2idefs ]; then
    . ${DB2DIR?}/instance/db2idefs
else
    echo "File ${DB2DIR?}/instance/db2idefs not found."
    echo "Exiting..."
    exit 1
fi

OLD_LIBPATH="$LIBPATH"
unset LIBPATH

OLD_LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
unset LD_LIBRARY_PATH

OLD_LD_LIBRARY_PATH_32="$LD_LIBRARY_PATH_32"
unset LD_LIBRARY_PATH_32

OLD_LD_LIBRARY_PATH_64="$LD_LIBRARY_PATH_64"
unset LD_LIBRARY_PATH_64

OLD_SHLIB_PATH="$SHLIB_PATH"
unset SHLIB_PATH

get_locale         # Get the locale name of set message catalog path
chk_nonroot        # Check that root is NOT running this program

LIBPATH="$OLD_LIBPATH"
if [ "X${LIBPATH?}" != "X" ]; then
   export LIBPATH
else
   unset LIBPATH
fi
unset OLD_LIBPATH

LD_LIBRARY_PATH="$OLD_LD_LIBRARY_PATH"
if [ "X${LD_LIBRARY_PATH?}" != "X" ]; then
   export LD_LIBRARY_PATH
else
   unset LD_LIBRARY_PATH
fi
unset OLD_LD_LIBRARY_PATH

LD_LIBRARY_PATH_32="$OLD_LD_LIBRARY_PATH_32"
if [ "X${LD_LIBRARY_PATH_32?}" != "X" ]; then
   export LD_LIBRARY_PATH_32
else
   unset LD_LIBRARY_PATH_32
fi
unset OLD_LD_LIBRARY_PATH_32

LD_LIBRARY_PATH_64="$OLD_LD_LIBRARY_PATH_64"
if [ "X${LD_LIBRARY_PATH_64?}" != "X" ]; then
   export LD_LIBRARY_PATH_64
else
   unset LD_LIBRARY_PATH_64
fi
unset OLD_LD_LIBRARY_PATH_64

SHLIB_PATH="$OLD_SHLIB_PATH"
if [ "X${SHLIB_PATH?}" != "X" ]; then
   export SHLIB_PATH
else
   unset SHLIB_PATH
fi
unset OLD_SHLIB_PATH

#-----------------------------------------------------------------------#
#               Start of function definitions
#-----------------------------------------------------------------------#

# Find the home directory associated with the named user
# This is used in place of chk_version, which requires root user to run
find_mighome()
{
    trac find_mighome $@
    set ${setopts?}

    curuser=$1
    db2proddir=""

    INSTHOME=`${DB2DIR?}/bin/db2usrinf -d ${curuser?}`

    if [ $? -ne 0 -o "X${INSTHOME?}" = "X" ]; then
        display_msg ${DB2CAT?} 131 \
            'DBI1131E The user ID %s is invalid.\n' ${curuser?}
        exit 4
    fi
    dmsg "Home directory of instance to upgrade is ${INSTHOME?}"

    instbindir="${INSTHOME?}/sqllib/bin"     # sqllib/bin dir of the instance
    instlibdir="${INSTHOME?}/sqllib/lib"     # sqllib/lib dir of the instance

    if [ ! -d ${instbindir?} ]; then
        display_msg ${DB2CAT?} 97 \
            'DBI1097E The file or directory %s does not exist.\n' ${instbindir?}
        exit 4
    fi

    # For DB2 Version 9 or later, the attribute V is defined in
    # sqllib/ctrl/.instuse file. We need to get the DB2 install
    # location directly from the .instuse

    INSTUSE_VALUE="PRE_V9"
    check_instuse=${FALSE?}
    query_instuse_string ${curuser?} V "PRE_V9"
    if [ "X${INSTUSE_VALUE?}" != "XPRE_V9" ]; then
       dmsg "INSTUSE_VALUE for V is ${INSTUSE_VALUE?}"
       check_instuse=${TRUE?}
    fi

    # use instuse for V8 - for multiple FP implementation
    query_instuse_string ${INSTNAME?} INSTVER 0
    dmsg "INSTUSE_VALUE for INSTVER is ${INSTUSE_VALUE?}"

    # if INSTVER is 81 then it is a V8 instance - can be anyone of the multiple FP
    if [ "X${INSTUSE_VALUE?}" = "X81" -o ${check_instuse} -eq ${TRUE?} ]; then
           # find out what is its install path - use that to set db2proddir
           query_instuse_string ${INSTNAME?} DB2DIR ${DB2DIR?}
           dmsg "INSTUSE_VALUE for DB2DIR is ${INSTUSE_VALUE?}"
           db2proddir=${INSTUSE_VALUE?}
    fi

    ls -l ${instlibdir?} | grep ${DB2V71DIR?}/lib 1>/dev/null 2>/dev/null
    if [ $? -eq 0 ]; then
        db2proddir="${DB2V71DIR?}"
    fi
    ls -l ${instlibdir?} | grep ${DB2V61DIR?}/lib 1>/dev/null 2>/dev/null
    if [ $? -eq 0 ]; then
        db2proddir="${DB2V61DIR?}"
    fi
    ls -l ${instlibdir?} | grep ${DB2V5DIR?}/lib 1>/dev/null 2>/dev/null
    if [ $? -eq 0 ]; then
        db2proddir="${DB2V5DIR?}"
    fi
    ls -l ${instlibdir?} | grep ${DB2V2DIR?}/lib 1>/dev/null 2>/dev/null
    if [ $? -eq 0 ]; then
        display_msg ${DB2CAT?} 202 \
            'DBI1202E Upgrade of instance %s is not supported.\n' ${curuser?}
        exit 4
    fi

    dmsg "db2proddir=${db2proddir?}"

    trax find_mighome
}

# pass arguments into db2checksd_exe
call_db2checksdexe()
{
    trac call_db2checksdexe $@
    set ${setopts?}

    # Find out what level of DB2 is associated with INSTNAME and set LIBPATH accordingly
    find_mighome ${INSTNAME?}
    DB2IPRDDIR="${db2proddir?}"   # DB2 product dir for instance INSTNAME

    # depending on whether existing instance is 32-bit or 64-bit, we need
    # to use a different binary.
    # default to 32-bit
    DB2LIB="lib"
    InstanceBitWidth
    IBW=$?
    if [ ${IBW?} -eq 32 ]
    then
        CMD_DB2CHECKSDEXE=${CMD_DB2CHECKSDEXE32?}
 
    elif [ ${IBW?} -eq 64 ]
    then
        CMD_DB2CHECKSDEXE=${CMD_DB2CHECKSDEXE64?}
        DB2LIB="lib64"
    else
        # fallback
        CMD_DB2CHECKSDEXE=${CMD_DB2CHECKSDEXE32?}
    fi

    LIBPATH="${DB2IPRDDIR?}/${DB2LIB?}"
    export LIBPATH

    # pass argument into db2checksd_exe
    ${CMD_DB2CHECKSDEXE?} ${ARGLIST?}
    exerc=$?

    unset LIBPATH

    trax call_db2checksdexe
}

# Default values for command line options
defaultopts()
{
    DEBUG=1               # Debug mode is FALSE

    INSTNAME=""           # Initialize variable for instance name
    INSTHOME=""           # Initialize variable for instance home directory

    CMD_DB2CHECKSDEXE32="${DB2DIR?}/bin/db2checkSD_exe"
    CMD_DB2CHECKSDEXE64="${DB2DIR?}/bin/db2checkSD_exe"
}

#-----------------------------------------------------------------------#
#                End of function definitions
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
#                             Main program
#-----------------------------------------------------------------------#

defaultopts        # Define default values for command-line options

# Copy command-line options
ARGLIST=$@

set ${setopts?}

# Get the instance name and home
INSTNAME=`${DB2DIR?}/bin/db2usrinf -n -R`
INSTHOME=`${DB2DIR?}/bin/db2usrinf -d ${INSTNAME?}`

# check if -l was passed by user
echo ${ARGLIST?} | grep " -l " 2>&1 1>/dev/null
rc1=$?
echo ${ARGLIST?} | grep " -l$" 2>&1 1>/dev/null
rc2=$?
if [ ${rc1?} -ne 0 -a ${rc2?} -ne 0 ]
then
    # append default log file to the ARGLIST since user didn't pass -l
    ARGLIST="${ARGLIST?} -l ${INSTHOME?}/db2checkSD.log"
fi

#add -nogpfs if DB2USENONGPFS is TRUE
if [ "X$DB2USENONGPFS" = "XTRUE" ] || [ "X$DB2USENONGPFS" = "Xtrue" ]
then
    ARGLIST="${ARGLIST?} -nogpfs"
fi

trap "stop_prog 2" 1 2 3 15
cleanup                      # Clean up

# organize input and pass it db2checkSD_exe
call_db2checksdexe

# exit
exit ${exerc?}
