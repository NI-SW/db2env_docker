#!/bin/sh
#############################################################################
#
# Licensed Materials - Property of IBM
#
# "Restricted Materials of IBM" 
#
# (C) COPYRIGHT IBM Corp. 1993, 2019 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#############################################################################

#
# NAME: db2ilist
#
# FUNCTION: db2ilist - lists all DB2 Version 5 instances.
#          -s - With this option, only shared data instances from current
#               copy will be returned
#
# USAGE: db2ilist
#
#############################################################################
# Options for "set" command
setopts="${setopts:-+x}"
set ${setopts?}

# Current DB2 installation directory

DB2LOCAL=`echo $DB2LOCAL`

if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/.mount ]; then
   DB2DIR=${DB2LOCAL?}/instance
   curdir=`/bin/pwd`
else
   curdir=`/bin/pwd`
   DB2DIR=`dirname $0`
   cd ${DB2DIR?}
   DB2DIR=`/bin/pwd`
fi

cd ${DB2DIR?}
DB2DIR=`dirname ${DB2DIR?}`
if [ ! -d ${DB2DIR?}/instance ]
then
    DB2DIR=`dirname ${DB2DIR?}`
fi
cfg_tmp="${DB2DIR?}/cfg/installcopy.cfg"
cmd_db2fupdt_tmp="${DB2DIR?}/bin/db2fupdt"
DB2_KEEP_IN_ORIGINAL_DB2DIR="${DB2_KEEP_IN_ORIGINAL_DB2DIR:-FALSE}"

if [ -f "${cfg_tmp?}" -a -f "${cmd_db2fupdt_tmp?}"  -a "X${DB2_KEEP_IN_ORIGINAL_DB2DIR?}" != "XTRUE" ]; then
   db2dir_tmp=`${cmd_db2fupdt_tmp?} -f ${cfg_tmp?} -p DB2DIR`
   if [ $? -eq 0 ]; then
      if [ -d ${db2dir_tmp?} ]; then
         cd ${db2dir_tmp?} 2>/dev/null 1>/dev/null
         if [ $? -eq 0 ]; then
            DB2DIR=`echo ${db2dir_tmp?} | sed 's/\/$//'`
         fi
     fi
   fi
fi 
cd ${curdir?}
unset curdir cfg_tmp cmd_db2fupdt_tmp db2dir_tmp DB2_KEEP_IN_ORIGINAL_DB2DIR

DB2LOCAL=`echo $DB2LOCAL`

if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/.mount ]; then
   if [ -d ${DB2LOCAL?}/instance ]; then
      PROGDIR=${DB2LOCAL?}/instance
      curdir=`/bin/pwd`
   fi

else

   # Set the directory name where this file is located.
   curdir=`/bin/pwd`
   PROGDIR=`dirname $0`
   cd ${PROGDIR?}
   PROGDIR=`/bin/pwd`
   cd ${curdir?}

   # Some environment variables may confuse us:
   unset SHLIB_PATH
   unset LIBPATH
   unset LD_LIBRARY_PATH

fi

PROGNAME=`basename $0`       # Program name

# Include common definition file
if [ -f ${PROGDIR?}/../instance/db2iutil ]; then
    . ${PROGDIR?}/../instance/db2iutil
else
    echo "File ${PROGDIR?}/db2iutil not found."
    echo "Exiting..."
    exit 1
fi

get_locale
add_servicerec ${PROGNAME?} 1

# Display the instance registry file
if [ -x ${DB2DIR?}/instance/db2iset ]; then
    cmd="${DB2DIR?}/instance/db2iset"
else
    cmd="${DB2DIR?}/adm/db2set"
fi

#-----------------------------------------------------------------------#
#               Start of function definitions
#-----------------------------------------------------------------------#

# To display the command syntax
syntax()
{
    display_msg ${DB2CAT?} 956 \
        'DBI1956I Usage: %s [-h|-?] \n' ${PROGNAME?}
    exit 1
}

# Default values for command line options
defaultopts()
{
    # trac defaultopts $@

    DEBUG=1               # Debug mode is FALSE
    NFULLILIST=""         # list of instance
    INSTPATH=""	          # Install path for the instance code level
    INSTNAME=""           # By Default not checking a particular instance
    INSTCHECK=1           # By Default not checking a particular instance
    FORMAT=1              # By default do not format - ie, V7 type output
    A_OPTION=${FALSE?}    # By default, -a option is not selected
    G_OPTION=${FALSE?}    # By default, -g option is not selected
    S_OPTION=${FALSE?}    # By default, -s option is not selected
    S_ARGUMENTS=""
    C_OPTION=${FALSE?}
    SD_OUTPUT=${FALSE?}
    DPF_OUTPUT=${FALSE?}
    ESE_OUTPUT=${FALSE?}
    CLIENT_OUTPUT=${FALSE?}
    PE_OUTPUT=${FALSE?}
    WSE_OUTPUT=${FALSE?}
    OUTPUT_FORMAT_FOR_GLOBAL_OPTION="#name:vrmf:sqllibdir:db2dir:instancetype:build"

    # trax defaultopts
}

get_instinfo_from_instuse()
{
  trac get_instinfo_from_instuse @
  set ${setopts?}
  instname=$1

  inst_home=`${DB2DIR?}/bin/db2usrinf -d ${instname?}`

  query_instuse ${instname?} "V" ${CurVERSION?}
  inst_v="${INSTUSE_VALUE?}"
  query_instuse ${instname?} "R" ${CurRELEASE?}
  inst_r="${INSTUSE_VALUE?}"
  query_instuse ${instname?} "M" ${CurMODIFICATION?}
  inst_m="${INSTUSE_VALUE?}"
  query_instuse ${instname?} "F" ${CurFIXLEVEL?}
  inst_f="${INSTUSE_VALUE?}"

  query_instuse_string ${instname?} "DB2DIR" ""
  rc=$?
  inst_db2dir="${INSTUSE_VALUE?}"

  INSTINFO="${instname?}:${inst_v?}.${inst_r?}.${inst_m?}.${inst_f?}:${inst_home?}/sqllib:${inst_db2dir?}"

  trax get_instinfo_from_instuse
  return ${rc?}
}

#-----------------------------------------------------------------------#
#                End of function definitions
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
#                             Main program
#-----------------------------------------------------------------------#

defaultopts        # Define default values for command-line options

# Process command-line options
case $# in
    0)
        :  # default options
        ;;
    *)
        while getopts :s:hacdg optchar; do
            case ${optchar?} in
                d)  # Turn debug mode on
                    DEBUG=0
                    setopts="-x" ;;
                s)  # Return SD instance, DPF instance, or both
                    S_OPTION=${TRUE?}
                    S_ARGUMENTS=${OPTARG?} ;;
                a)  #Return all instances with server types
                    A_OPTION=${TRUE?} ;;
                c)  # Output formatting separator type is colon
                    C_OPTION=${TRUE?} ;;
                g)  # Return all instances in global registry
                    G_OPTION=${TRUE?} ;;
                h)  # Display help
                    syntax ;;
                ?)  # Display help
                    syntax ;;
            esac
        done
        shift `expr $OPTIND - 1` # Detele all option args
        INSTNAME="$1"            # Instance name
        if [ "X${INSTNAME?}" != "X" ]; then
            INSTCHECK=0
        fi
        ;;
esac

set ${setopts?}

ROOT_GLOBAL_REG_PATH="/var/db2/global.reg"

if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/global.reg ]; then
     DB2_GLOBAL_REG_PATHNAME="${DB2LOCAL?}/global.reg"
elif [ -f ${DB2DIR?}/global.reg ]; then
    DB2_GLOBAL_REG_PATHNAME="${DB2DIR?}/global.reg"
else
    DB2_GLOBAL_REG_PATHNAME="${ROOT_GLOBAL_REG_PATH?}"
fi
export DB2_GLOBAL_REG_PATHNAME

if [ `${DB2DIR?}/bin/db2usrinf -E` -ne 0 ]; then
    ${DB2DIR?}/bin/db2greg -dump | awk '{if($1=="I"&&$2="DB2"&&$9==DB2DIR)print $4}' FS=, DB2DIR="${DB2DIR?}" 1>/dev/null 2>/dev/null
else
    ${cmd?} -l 1>/dev/null 2>/dev/null
fi

cmdrc=$?
if [ ${cmdrc?} -eq 0 ]; then
    DASDLFMLIST=""

    ${cmd?} DB2ADMINSERVER -g 1>/dev/null 2>/dev/null
    rc=$?
    if [ ${rc?} -eq 0 ]; then
        DASINAME=`${cmd?} DB2ADMINSERVER -g`
        DASDLFMLIST=${DASDLFMLIST?}" ${DASINAME?}"
    fi

    if [ `${DB2DIR?}/bin/db2usrinf -E` -ne 0 ]; then

          if [ "X${DB2LOCAL?}" != "X" -a  -f ${DB2LOCAL?}/.mount ]; then
             FULLILIST=`${cmd?} -l`
          else
             FULLILIST=`${DB2DIR?}/bin/db2greg -dump | awk '{if($1=="I"&&$2="DB2"&&$9==DB2DIR)print $4}' FS=, DB2DIR="${DB2DIR?}"`
          fi
    else
        if [ ${G_OPTION?} -eq ${TRUE?} ]; then
          FULLILIST=`${DB2DIR?}/bin/db2greg -dump | awk '{if($1=="I"&&$2="DB2")print $4":"$3":"$5":"$9}' FS=,`
        else
          FULLILIST=`${cmd?} -l`
        fi
    fi

    for line in ${FULLILIST?}
    do
        name=`echo ${line?} | awk '{print $1}' FS=:`
        findwordinstr "${name?}" "${DASDLFMLIST?}"
        if [ $? -ne 0 ]; then
            NFULLILIST=${line?}" ${NFULLILIST?}"
        fi
    done
fi

# check to see if we are looking for a particular instance
if [ ${INSTCHECK?} -eq 0 ]; then

     match=`echo "${FULLILIST}" | awk '{if($1==INSTNAME)print $0}' FS=: INSTNAME="${INSTNAME?}"`

     if [ -z "${match?}" -a ${G_OPTION} -eq ${TRUE?} ]; then
        get_instinfo_from_instuse ${INSTNAME?}
        if [ $? -eq 0 ]; then
          match="${INSTINFO?}"
        fi
     fi

     if [ -z "${match?}" ]; then
        echo "${INSTNAME?} is not a valid instance"
         exit 1
     fi

     NFULLILIST="${match?}"
fi

# if FORMAT is 0 then prepare to use TMP file
if [ ${FORMAT?} -eq 0 ]; then
    rm -f ${TMPFILE1?}
fi

# Create the list of instances to be returned to the user based on values of -s,-a,-g params
if [ ${S_OPTION?} -eq ${TRUE?} -o ${A_OPTION?} -eq ${TRUE?} -o ${G_OPTION?} -eq ${TRUE?} ]; then

  if [ "X${NFULLILIST?}" != "X" ]; then

    SD_LIST=""
    DPF_LIST=""
    CLIENT_LIST=""
    ESE_LIST=""
    WSE_LIST=""
    PE_LIST=""

    # Process -s arguments
    S_ARGUMENTS=`echo ${S_ARGUMENTS?} | sed 's/,/ /g'` # Replace comma with space
    for name in ${S_ARGUMENTS?}; do
        case ${name?} in
            "dpf")
                   # DPF instance only
                   DPF_OUTPUT=${TRUE?}    ;;
            "dsf")
                   # SD instance only
                   SD_OUTPUT=${TRUE?}     ;;
            "client")
                   # CLIENT instance only
                   CLIENT_OUTPUT=${TRUE?} ;;
            "ese")
                   # ESE instance only
                   ESE_OUTPUT=${TRUE?}    ;;
            "wse")
                   # WSE instance only
                   WSE_OUTPUT=${TRUE?}    ;;
            "standalone")
                   # PE instance only
                   PE_OUTPUT=${TRUE?}     ;;
            *)     syntax                 ;;
        esac
    done

    # Filter out proper instances
    for entry in ${NFULLILIST?}; do

     name=`echo ${entry?} | awk '{print $1}' FS=:`

     # list only instances which are valid user info wsdbu00941774myk
     if ${DB2DIR?}/bin/db2usrinf -q ${name?}; then

       inst_home=`${DB2DIR?}/bin/db2usrinf -d ${name?}`
       read bldlevel < ${inst_home?}/sqllib/cfg/bldlevel

       instType=0
       get_insttype ${name?} ${DB2VER_CURRENT?}
       instType=$?

       case ${instType?} in
          ${ITYPE_SD?})
          SD_LIST="${SD_LIST?} ${entry?}:dsf:${bldlevel?}"
          ;;
          ${ITYPE_CLN?})
          CLIENT_LIST="${CLIENT_LIST?} ${entry?}:client:${bldlevel?}"
          ;;
          ${ITYPE_PER?})
          PE_LIST="${PE_LIST?} ${entry?}:standalone:${bldlevel?}"
          ;;
          ${ITYPE_SRV?})
          WSE_LIST="${WSE_LIST?} ${entry?}:wse:${bldlevel?}"
          ;;
          ${ITYPE_EEE?})
            # could be dpf.
            if is_dpf ${name?} ${DB2VER_CURRENT?} ${inst_home?}; then
              DPF_LIST="${DPF_LIST?} ${entry?}:dpf:${bldlevel?}"
            else
              ESE_LIST="${ESE_LIST?} ${entry?}:ese:${bldlevel?}"
            fi
          ;;
       esac
     fi
    done

    # Reformat the instance list
    NFULLILIST=""
    if [ ${SD_OUTPUT?} -eq ${TRUE?} -o ${A_OPTION?} -eq ${TRUE?} -o ${G_OPTION?} -eq ${TRUE?} ]; then
        NFULLILIST="${NFULLILIST?} ${SD_LIST?}"
    fi
    if [ ${DPF_OUTPUT?} -eq ${TRUE?} -o ${A_OPTION?} -eq ${TRUE?} -o ${G_OPTION?} -eq ${TRUE?} ]; then
        NFULLILIST="${NFULLILIST?} ${DPF_LIST?}"
    fi
    if [ ${PE_OUTPUT?} -eq ${TRUE?} -o ${A_OPTION?} -eq ${TRUE?} -o ${G_OPTION?} -eq ${TRUE?} ]; then
        NFULLILIST="${NFULLILIST?} ${PE_LIST?}"
    fi
    if [ ${CLIENT_OUTPUT?} -eq ${TRUE?} -o ${A_OPTION?} -eq ${TRUE?} -o ${G_OPTION?} -eq ${TRUE?} ]; then
        NFULLILIST="${NFULLILIST?} ${CLIENT_LIST?}"
    fi
    if [ ${WSE_OUTPUT?} -eq ${TRUE?} -o ${A_OPTION?} -eq ${TRUE?} -o ${G_OPTION?} -eq ${TRUE?} ]; then
        NFULLILIST="${NFULLILIST?} ${WSE_LIST?}"
    fi
    if [ ${ESE_OUTPUT?} -eq ${TRUE?} -o ${A_OPTION?} -eq ${TRUE?} -o ${G_OPTION?} -eq ${TRUE?} ]; then
        NFULLILIST="${NFULLILIST?} ${ESE_LIST?}"
    fi
  fi
fi

if [ "X${NFULLILIST?}" != "X" ]; then

    if [ ${G_OPTION?} -eq ${TRUE?} ]; then
        echo ${OUTPUT_FORMAT_FOR_GLOBAL_OPTION?}
    fi

    for entry in ${NFULLILIST?}; do

        if [ ${FORMAT?} -eq 1 ]; then
            if [ ${A_OPTION?} -eq ${TRUE?} ]; then
              instname=`echo ${entry?} | awk '{print $1}' FS=:`
              insttype=`echo ${entry?} | awk '{print $2}' FS=:`

              if [ ${G_OPTION?} -eq ${TRUE?} ]; then
                insttype=`echo ${entry?} | awk '{print $5}' FS=:`
              fi

              entry="${instname?}:${insttype?}"
              if [ ${C_OPTION?} -eq ${FALSE?} ]; then
                entry=`echo "${entry?}" | sed 's/:/ /'`
              fi
            elif [ ${G_OPTION?} -ne ${TRUE?} ]; then
              entry=`echo ${entry?} | awk '{print $1}' FS=:`
            fi

            echo ${entry?}
        else
            ADDTOLIST=0
            INSTINFO=""
            name=`echo ${entry?} | awk '{print $1}' FS=:`

            # query installpath and append this to instance name
            query_instuse_string ${name?} DB2DIR ""
            INSTPATH=${INSTUSE_VALUE?}
            INSTINFO=${INSTINFO?}"  ${INSTPATH?}"

            if [ ${ADDTOLIST?} -eq 0 ]; then
                echo "${name?}${INSTINFO?}" >> ${TMPFILE1?}
            fi
        fi
        if [ ${FORMAT?} -eq 0 -a -f ${TMPFILE1?} ]; then
            cat ${TMPFILE1?} | awk '{printf "%-10s %-4s %-s\n", $1, $2, $3}'
            rm -f ${TMPFILE1?}
        fi
    done
fi

# Successful exit.
exit ${cmdrc?}

